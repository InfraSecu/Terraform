# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform Deploy with Snyk Security Gate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Analyse de s√©curit√© avec Snyk sur runner GitHub
  security-scan:
    runs-on: ubuntu-latest  # Runner h√©berg√© par GitHub
    outputs:
      scan-result: ${{ steps.check-results.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Snyk IaC scan
        id: snyk-scan
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=low
        continue-on-error: true

      - name: Check Snyk scan results
        id: check-results
        run: |
          if [ "${{ steps.snyk-scan.outcome }}" == "failure" ]; then
            echo "‚õî Vuln√©rabilit√©s d√©tect√©es par Snyk - m√™me de niveau 'low'"
            echo "‚ùå D√©ploiement Terraform sera bloqu√© pour des raisons de s√©curit√©"
            echo "result=failure" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Aucune vuln√©rabilit√© d√©tect√©e. D√©ploiement Terraform autoris√©."
            echo "result=success" >> $GITHUB_OUTPUT
          fi

      - name: Generate Snyk Report
        if: steps.snyk-scan.outcome == 'failure'
        run: |
          echo "### Rapport de vuln√©rabilit√©s Snyk üîç" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Des vuln√©rabilit√©s ont √©t√© d√©tect√©es dans votre infrastructure. Le d√©ploiement sera bloqu√©." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Consultez les logs de l'√©tape 'Run Snyk IaC scan' pour plus de d√©tails." >> $GITHUB_STEP_SUMMARY

  # Job 2: D√©ploiement Terraform sur runner auto-h√©berg√©
  terraform-deploy:
    needs: security-scan  # Attend que le job security-scan soit termin√©
    if: needs.security-scan.outputs.scan-result == 'success'  # Ex√©cute uniquement si le scan est r√©ussi
    runs-on: self-hosted  # Utilise votre runner auto-h√©berg√©
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Optionnel si Terraform est d√©j√† install√© sur votre runner
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Sp√©cifiez la version souhait√©e

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: tf-plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        id: tf-apply  
        run: terraform apply -auto-approve tfplan

  # Job 3: Notification en cas d'√©chec de s√©curit√©
  notification-failure:
    needs: security-scan
    if: needs.security-scan.outputs.scan-result == 'failure'
    runs-on: ubuntu-latest  # Peut √™tre n'importe quel runner
    steps:
      - name: Notification d'√©chec
        run: |
          echo "Le d√©ploiement a √©t√© bloqu√© car Snyk a d√©tect√© des vuln√©rabilit√©s."
          echo "Veuillez consulter les r√©sultats de l'analyse pour plus de d√©tails."
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
            server_address: smtp.office365.com
            server_port: 587
            secure: starttls  # MODIFICATION IMPORTANTE ICI
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            subject: "‚ö†Ô∏è [GitHub Actions] Vuln√©rabilit√©s d√©tect√©es dans l'Infrastructure"
            html_body: |
              <h1>Alerte de s√©curit√©</h1>
              <p>Des vuln√©rabilit√©s ont √©t√© d√©tect√©es.</p>
            to: ${{ github.event.pusher.email }}
            from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
      # Vous pourriez ajouter ici des actions pour envoyer des notifications (Slack, email, etc.)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     slack-message: "‚õî D√©ploiement Terraform bloqu√© - Vuln√©rabilit√©s d√©tect√©es"
      #     channel-id: "C123456"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}



